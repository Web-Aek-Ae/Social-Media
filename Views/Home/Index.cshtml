@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}

@using SocialMedia.Models.Database
@model SocialMedia.ViewModels.HomeViewModel


<head>
    <link rel="stylesheet" href="~/css/home.css" asp-append-version="true">

</head>

<body>
    <div class="main">
        <div class="header">
            <div class="search">
                <div class="search-bar">
                    <i class="fa fa-search"></i>
                    <input type="text" placeholder="Search" id="search-input">
                </div>
                <div class="filter-bar">
                    <button class="filterBtn">
                        <i class="fa-solid fa-angle-down"></i>
                        <p>Filter</p>
                    </button>
                    <div class="dropdownFilter">
                        <a href="" class="filter">
                            <p>Title</p>
                        </a>
                        <a href="" class="filter">
                            <p>Username</p>
                        </a>
                        <a href="" class="filter">
                            <p>Categories</p>
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-post">
            @if(Model.Posts != null){

            @foreach (var post in Model.Posts)
            {

                <div class="post" data-postid-2="@post.PostId" data-closed="@post.PostStatus" >
                    <a class="link" asp-action="Post" asp-controller="Home" asp-route-id="@post.PostId" style="text-decoration: none; color:black;">
                        <div class="card-post">
                            <img src="@post.Image" alt="activity" class="activity">
                            <div class="content">
                                <div class="post-header">
                                    <div class="date">
                                        <h3 class="month">@post.Date.ToString("MMM").ToUpper()</h3>
                                        <h3 class="day">@post.Date.Day</h3>
                                        <h3 class="year">@post.Date.Year</h3>
                                    </div>
                                    <div class="topic">
                                        <h1>@post.Title</h1>
                                        <p>@post.Time.ToString("HH:mm"), @post.Location</p>
                                    </div>
                                </div>
                                <div class="description">
                                    <p>@post.Content</p>
                                    <div class="owner">
                                        <img src="@post.User.Image"
                                            alt="" id="owner-profile">
                                        <span>@post.User.Name</span>
                                    </div>
                                    <div class="action">
                                    @using System.Security.Claims
                                    @if(post.PostStatus != Post.Status.Closed){
                                            @if (post.JoinActivities.Any(l => l.UserId == (int.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out int userId) ? userId : 0)))
                                            {
                                                            <button  data-postid="@post.PostId" class="joined-button" >joined</button>
                                            }
                                            else
                                            {
                                                            <button data-postid="@post.PostId"  class="join-button" >join activity</button>
                                            }
                                    }
                                    else{
                                        <button class="closed-button">Closed</button>
                                    }
                                        <div class="likes">
                                            <button data-postid="@post.PostId" class="like-button">
                                            @if (post.PostLikes.Any(l => l.UserId == (int.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out int userId) ? userId : 0)))
                                            {
                                                        <img src="@Url.Content("~/src/images/LikedIcon.svg")" class="icon" >

                                            }
                                            else
                                            {
                                                        <img src="@Url.Content("~/src/images/LikeIcon.svg")" class="icon" >
                                            }

                                            </button>
                                            <span class="likeCount">@post.PostLikes.Count
                                                <div class="dropdownLike">

                                                    @foreach (var like in post.PostLikes.ToList())
                                                    {
                                                        <div class="member">
                                                            @if (like.User != null)
                                                                {
                                                                    <img src="@like.User.Image">
                                                                    <h5>@like.User.Name</h5>
                                                                }
                                                                else
                                                                {
                                                                    <h5>User not found.</h5>
                                                                }

                                                        </div>
                                                    }
                                                    
                                                </div>
                                            </span>
                                        </div>
                                        <div class="participant">
                                            <img src="@Url.Content("~/src/images/People_in_postcardIcon.svg")" class="icon"/>
                                            <div class="participantCount">
                                                <span class="joined">@post.JoinActivities.Count </span>
                                                <span class="max"> / @post.MaxPeople</span>
                                                    <div class="dropdownParticipant">
                                                        @foreach (var joinActivity in post.JoinActivities)
                                                        {
                                                            <div class="member">
                                                                <img src="@joinActivity.User.Image">
                                                                <h5>@joinActivity.User.Name</h5>
                                                            </div>
                                                        }                                        
                                                    </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }
            }
            </div>
            <div class="addPostIcon">
                <a asp-action="Create" asp-controller="Post"><img src="~/src/images/AddPostIcon.svg"></a>
            </div>
    </div>
</body>

<script>

    document.addEventListener("DOMContentLoaded", function() {
    var scrollToButtonId = sessionStorage.getItem('scrollToButton');
    if (scrollToButtonId) {
        var button = document.querySelector('[data-postid-2="' + scrollToButtonId + '"]');
        if (button) {
            button.scrollIntoView();
        }
        // Clear the stored value to prevent unwanted scrolling on subsequent page loads
        sessionStorage.removeItem('scrollToButton');
    }

    @* document.querySelectorAll('[data-closed="Closed"').forEach(button => {
        console.log(button);
        button.style = "background-color: #d3d3d3 ";
        button.querySelector('.like-button').style = "background-color: #d3d3d3 ";
    }); *@
});


const poom = () => {
    document.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            var postId = this.getAttribute('data-postid');

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/PostLike/LikePost'); // Adjust the URL to match your routing
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    var result = JSON.parse(xhr.responseText);
                    console.log(result);
                    var imgSrc = result.liked ? '/src/images/LikedIcon.svg' : '/src/images/LikeIcon.svg'; // Adjust the paths as necessary
                    button.querySelector('img').setAttribute('src', imgSrc);
                    button.nextElementSibling.textContent = result.likeCount;
                    console.log("Post liked successfully");
                    sessionStorage.setItem('scrollToButton', postId);
                    window.location.reload();
                    
                } else {
                    console.log("Error liking post: " + xhr.statusText);
                }
            };
            xhr.send('postId=' + postId);
        });
    });

    // Handle join and unjoin activity button clicks
    function handleJoinActivity(button, isJoin) {
        var postId = button.getAttribute('data-postid');
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/JoinActivity/JoinActivity'); // Adjust the URL to match your routing
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onload = function() {
            if (xhr.status === 200) {
                var result = JSON.parse(xhr.responseText);
                console.log(result);
                if (result.success) {
                    button.textContent = result.joined ? 'joined' : 'join activity';
                    button.classList.toggle('join-button', !result.joined);
                    button.classList.toggle('joined-button', result.joined);
                    button.parentNode.querySelector('.joined').textContent = result.joinActivitiesCount;
                    console.log(result.joined ? "Post joined successfully" : "Post unjoined successfully");
                    
                    sessionStorage.setItem('scrollToButton', postId);
                    window.location.reload();
                }
            } else {
                console.log("Error joining activity: " + xhr.statusText);
            }
        };
        xhr.send('postId=' + postId);
    }

    // Initial bindings for join buttons
    document.querySelectorAll('.join-button').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            handleJoinActivity(this, true);
        });
    });

    document.querySelectorAll('.joined-button').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            handleJoinActivity(this, false);
        });
    });


    document.getElementById("search-input").addEventListener("change", sentSearch);

};

function sentSearch() {
    var data = document.getElementById("search-input").value;
    if (data == ""){
        window.location.href = "/Home/Index";
        return;
    }
    var newXhr = new XMLHttpRequest();
    newXhr.open("GET", "/Home/Index?data="+data, true);
    newXhr.setRequestHeader("Content-Type", "application/json");

    newXhr.onreadystatechange = function () {
        if (newXhr.readyState === XMLHttpRequest.DONE) {
            if (newXhr.status === 200) {
                console.log("Data sent successfully");
                console.log(data);
                const container = document.querySelector(".container-post")
                container.innerHTML = newXhr.responseText
                console.log(newXhr.responseText)
                poom()
            } else {
                console.log("Error sending data");
            }
        }
    };

    var jsonData = JSON.stringify({ data: data });

    // Send the request with the JSON data
    newXhr.send(jsonData);
}

poom()

</script>

